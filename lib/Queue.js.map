{"version":3,"sources":["Queue.ts","Queue.js"],"names":[],"mappings":"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","file":"Queue.js","sourcesContent":["\"use strict\";\n\n// External Node Imports\nlet ytdl: any = require(\"youtube-dl\");\n\n// Local TS Imports\nimport Bot from \"./Bot\";\nimport Request from \"./Request\";\n\nclass Queue {\n\tbot: Bot;\n\tlist: Request[];\n\tstarted: boolean;\n\tisPlaying: boolean;\n\n\tconstructor(bot: Bot){\n\t\tthis.bot = bot;\n\t\tthis.list = [ ];\n\t\tthis.started = false;\n\t\tthis.isPlaying = false;\n\t}\n\n\tget currentlyPlaying(){\n\t\treturn this.list.length > 0 ? this.list[0] : undefined;\n\t}\n\n\taddRequest(link: string, user: any, callback?: (error: any, request: any, position: any) => void): void {\n\t\tlet url: boolean = false;\n\n\t\tif (require(\"valid-url\").isUri(link)){\n\t\t\turl = true;\n\t\t} else {\n\t\t\tlink = \"gvsearch1:\" + link;\n\t\t}\n\n\t\tytdl.getInfo(link, (error, info) => {\n\t\t\tif (error){\n\t\t\t\tif (error.message.indexOf(\"ERROR: Unsupported URL\") > -1){\n\t\t\t\t\tif (callback) callback(\"invalid\", undefined, undefined);\n\t\t\t\t} else {\n\t\t\t\t\tif (callback) callback(error.message, undefined, undefined);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Credit to http://stackoverflow.com/a/9640417.\n\t\t\t\tlet split: string[] = info.duration.split(\":\");\n\t\t\t\tlet sec: number = 0;\n\t\t\t\tlet min: number = 1;\n\n\t\t\t\twhile (split.length > 0){\n\t\t\t\t\tsec += min * parseInt(split.pop(), 10);\n\t\t\t\t\tmin *= 60;\n\t\t\t\t}\n\n\t\t\t\tlet request: Request = new Request({\n\t\t\t\t\ttitle: info.fulltitle,\n\t\t\t\t\tlink: url ? link : \"https://www.youtube.com/watch?v=\" + info.id,\n\t\t\t\t\trequester: user.id ? user.id : user,\n\t\t\t\t\tduration: sec\n\t\t\t\t});\n\n\t\t\t\tthis.list.push(request);\n\t\t\t\tthis._checkQueue();\n\n\t\t\t\tif (callback) callback(undefined, request, this.list.length);\n\t\t\t}\n\t\t});\n\t}\n\n\tremRequest(position, callback?: (error: any, request: Request) => void): void {\n\t\tif (this.list.length >= position + 1){\n\t\t\tlet voice: any = this.bot.client.voiceConnection;\n\t\t\tlet cont: boolean = false;\n\t\t\tlet request: Request = this.list[position];\n\n\t\t\tif (position === 0 && this.started){\n\t\t\t\tthis.bot.client.setPlayingGame(null, (error) => {\n\t\t\t\t\tif (error){\n\t\t\t\t\t\tconsole.error(\"An error occurred resetting the song status on remove.\");\n\t\t\t\t\t\tconsole.error(error);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tvoice.stopPlaying();\n\n\t\t\t\tthis.started = false;\n\t\t\t\tthis.isPlaying = false;\n\n\t\t\t\tcont = true;\n\t\t\t}\n\n\t\t\tthis.list.splice(position, 1);\n\n\t\t\tif (cont){\n\t\t\t\tthis._checkQueue();\n\t\t\t}\n\n\t\t\tif (callback) callback(undefined, request);\n\t\t} else {\n\t\t\tif (callback) callback(\"nothing playing\", undefined);\n\t\t}\n\t}\n\n\t_checkQueue(): void {\n\t\tif (!this.isPlaying && !this.bot.client.voiceConnection.playing && this.list.length > 0){\n\t\t\tthis._queryQueue(this.currentlyPlaying);\n\t\t}\n\t}\n\n\t_queryQueue(request: any): void {\n\t\tconsole.log(this.list[0]);\n\n\t\tthis.isPlaying = true;\n\t\tlet stream: any = ytdl(request.link, [ \"--format=bestaudio[abr<=192]/best\" ]);\n\n\t\tstream.on(\"info\", (info, format) => {\n\t\t\tthis.bot.client.setPlayingGame(info.title);\n\n\t\t\tthis.bot.sendMessage(this.bot.config.linked.text, {\n\t\t\t\tmessage: \"Now playing `\" + request.title + \"`.\"\n\t\t\t});\n\t\t});\n\n\t\tstream.on(\"error\", (error) => {\n\t\t\tthis.bot.sendMessage(this.bot.config.linked.text, {\n\t\t\t\tmessage: \"```\\n\" + error.message + \"\\n```\"\n\t\t\t});\n\n\t\t\tthis.remRequest(0);\n\t\t});\n\n\t\tthis.bot.client.startTyping(this.bot.config.linked.text);\n\n\t\tthis.bot.client.voiceConnection.playRawStream(stream, (error, intent) => {\n\t\t\tif (error){\n\t\t\t\tconsole.error(\"An error occurred playing a stream.\")\n\t\t\t\tconsole.error(error);\n\t\t\t} else {\n\t\t\t\tthis.started = true;\n\n\t\t\t\tintent.on(\"end\", () => {\n\t\t\t\t\tthis.remRequest(0);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport default Queue;\n","\"use strict\";\n// External Node Imports\nlet ytdl = require(\"youtube-dl\");\nconst Request_1 = require(\"./Request\");\nclass Queue {\n    constructor(bot) {\n        this.bot = bot;\n        this.list = [];\n        this.started = false;\n        this.isPlaying = false;\n    }\n    get currentlyPlaying() {\n        return this.list.length > 0 ? this.list[0] : undefined;\n    }\n    addRequest(link, user, callback) {\n        let url = false;\n        if (require(\"valid-url\").isUri(link)) {\n            url = true;\n        }\n        else {\n            link = \"gvsearch1:\" + link;\n        }\n        ytdl.getInfo(link, (error, info) => {\n            if (error) {\n                if (error.message.indexOf(\"ERROR: Unsupported URL\") > -1) {\n                    if (callback)\n                        callback(\"invalid\", undefined, undefined);\n                }\n                else {\n                    if (callback)\n                        callback(error.message, undefined, undefined);\n                }\n            }\n            else {\n                // Credit to http://stackoverflow.com/a/9640417.\n                let split = info.duration.split(\":\");\n                let sec = 0;\n                let min = 1;\n                while (split.length > 0) {\n                    sec += min * parseInt(split.pop(), 10);\n                    min *= 60;\n                }\n                let request = new Request_1.default({\n                    title: info.fulltitle,\n                    link: url ? link : \"https://www.youtube.com/watch?v=\" + info.id,\n                    requester: user.id ? user.id : user,\n                    duration: sec\n                });\n                this.list.push(request);\n                this._checkQueue();\n                if (callback)\n                    callback(undefined, request, this.list.length);\n            }\n        });\n    }\n    remRequest(position, callback) {\n        if (this.list.length >= position + 1) {\n            let voice = this.bot.client.voiceConnection;\n            let cont = false;\n            let request = this.list[position];\n            if (position === 0 && this.started) {\n                this.bot.client.setPlayingGame(null, (error) => {\n                    if (error) {\n                        console.error(\"An error occurred resetting the song status on remove.\");\n                        console.error(error);\n                    }\n                });\n                voice.stopPlaying();\n                this.started = false;\n                this.isPlaying = false;\n                cont = true;\n            }\n            this.list.splice(position, 1);\n            if (cont) {\n                this._checkQueue();\n            }\n            if (callback)\n                callback(undefined, request);\n        }\n        else {\n            if (callback)\n                callback(\"nothing playing\", undefined);\n        }\n    }\n    _checkQueue() {\n        if (!this.isPlaying && !this.bot.client.voiceConnection.playing && this.list.length > 0) {\n            this._queryQueue(this.currentlyPlaying);\n        }\n    }\n    _queryQueue(request) {\n        console.log(this.list[0]);\n        this.isPlaying = true;\n        let stream = ytdl(request.link, [\"--format=bestaudio[abr<=192]/best\"]);\n        stream.on(\"info\", (info, format) => {\n            this.bot.client.setPlayingGame(info.title);\n            this.bot.sendMessage(this.bot.config.linked.text, {\n                message: \"Now playing `\" + request.title + \"`.\"\n            });\n        });\n        stream.on(\"error\", (error) => {\n            this.bot.sendMessage(this.bot.config.linked.text, {\n                message: \"```\\n\" + error.message + \"\\n```\"\n            });\n            this.remRequest(0);\n        });\n        this.bot.client.startTyping(this.bot.config.linked.text);\n        this.bot.client.voiceConnection.playRawStream(stream, (error, intent) => {\n            if (error) {\n                console.error(\"An error occurred playing a stream.\");\n                console.error(error);\n            }\n            else {\n                this.started = true;\n                intent.on(\"end\", () => {\n                    this.remRequest(0);\n                });\n            }\n        });\n    }\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Queue;\n"],"sourceRoot":"/source/"}