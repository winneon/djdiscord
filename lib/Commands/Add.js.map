{"version":3,"sources":["Commands/Add.ts","Commands/Add.js"],"names":[],"mappings":"AAAA;;;;;;;AAGA,IAAI,KAAU,QAAQ,IAAR,CAAd;AAIA,IAAA,WAAA,QAAmB,WAAnB,CAAA;;IAIA,G;AAQC,iBAAY,KAAZ,EAAwB;AAAA;;AAPxB,aAAA,KAAA,GAAgB,cAAhB;AACA,aAAA,WAAA,GAAsB,6BAAtB;AACA,aAAA,IAAA,GAAe,CAAf;AACA,aAAA,KAAA,GAAiB,KAAjB;AAKC,aAAK,KAAL,GAAa,KAAb;AACA;;;;kCAES,G,EAAU,O,EAAc,I,EAAc;AAC/C,gBAAI,MAAJ,CAAW,WAAX,CAAuB,QAAQ,OAA/B;AAEA,iBAAK,KAAL,CAAW,UAAX,CAAsB,QAAQ,WAAR,EAAqB,KAArB,CAA2B,KAAK,CAAL,CAA3B,IAAsC,KAAK,CAAL,CAAtC,GAAgD,KAAK,IAAL,CAAU,GAAV,CAAtE,EAAsF,QAAQ,MAA9F,EACE,IADF,CACO,UAAC,IAAD,EAAK;AACV,yBAAA,OAAA,CAAO,QAAP,CAAgB,GAAhB,EAAqB,kBAAkB,KAAK,OAAL,CAAa,UAAb,GAA0B,KAAK,OAAL,CAAa,UAAvC,GAAoD,KAAK,OAAL,CAAa,KAAnF,IAA4F,IAA5F,GAAmG,KAAK,OAAL,CAAa,gBAAhH,GAAmI,gBAAnI,GAAsJ,KAAK,QAA3J,GAAsK,IAA3L;AACA,aAHF,EAIE,KAJF,CAIQ,UAAC,KAAD,EAAM;AACZ,oBAAI,MAAM,OAAN,KAAkB,cAAtB,EAAqC;AACpC,6BAAA,OAAA,CAAO,KAAP,CAAa,GAAb,EAAkB,oFAAlB;AACA,iBAFD,MAEO;AACN,6BAAA,OAAA,CAAO,KAAP,CAAa,GAAb,EAAkB,0BAA0B,MAAM,OAAhC,GAA0C,KAA5D,EAAmE,KAAnE;AACA;AACD,aAVF;AAWA;;;;;;AAGF,OAAA,cAAA,CAAA,OAAA,EAAA,YAAA,EAAA,EAAA,OAAA,IAAA,EAAA;ACXA,QAAQ,OAAR,GDWe,GCXf","file":"Commands/Add.js","sourcesContent":["\"use strict\";\n\n// Native Node Imports\nlet fs: any = require(\"fs\");\n\n// Local TS Imports\nimport Bot from \"../Bot\";\nimport Logger from \"../Logger\";\nimport Queue from \"../Queue\";\nimport Command from \"../Interfaces/Command\";\n\nclass Add implements Command {\n\tusage: string = \"%cmd% <link>\";\n\tdescription: string = \"Add a song to the dJ queue.\";\n\targs: number = 1;\n\tstaff: boolean = false;\n\n\tqueue: Queue;\n\n\tconstructor(queue: Queue){\n\t\tthis.queue = queue;\n\t}\n\n\tonCommand(bot: Bot, message: any, args: string[]): void {\n\t\tbot.client.startTyping(message.channel);\n\n\t\tthis.queue.addRequest(require(\"valid-url\").isUri(args[0]) ? args[0] : args.join(\" \"), message.author)\n\t\t\t.then((data) => {\n\t\t\t\tLogger.announce(bot, \"Added song `\" + (data.request.shortTitle ? data.request.shortTitle : data.request.title) + \" [\" + data.request.durationAsString + \"]`, position `\" + data.position + \"`.\");\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tif (error.message === \"Invalid URL!\"){\n\t\t\t\t\tLogger.error(bot, \"Invalid URL. Supported sites: https://rg3.github.io/youtube-dl/supportedsites.html\");\n\t\t\t\t} else {\n\t\t\t\t\tLogger.error(bot, \"Unknown Error:\\n\\n```\" + error.message + \"```\", error);\n\t\t\t\t}\n\t\t\t});\n\t}\n}\n\nexport default Add;\n","\"use strict\";\n// Native Node Imports\nlet fs = require(\"fs\");\nconst Logger_1 = require(\"../Logger\");\nclass Add {\n    constructor(queue) {\n        this.usage = \"%cmd% <link>\";\n        this.description = \"Add a song to the dJ queue.\";\n        this.args = 1;\n        this.staff = false;\n        this.queue = queue;\n    }\n    onCommand(bot, message, args) {\n        bot.client.startTyping(message.channel);\n        this.queue.addRequest(require(\"valid-url\").isUri(args[0]) ? args[0] : args.join(\" \"), message.author)\n            .then((data) => {\n            Logger_1.default.announce(bot, \"Added song `\" + (data.request.shortTitle ? data.request.shortTitle : data.request.title) + \" [\" + data.request.durationAsString + \"]`, position `\" + data.position + \"`.\");\n        })\n            .catch((error) => {\n            if (error.message === \"Invalid URL!\") {\n                Logger_1.default.error(bot, \"Invalid URL. Supported sites: https://rg3.github.io/youtube-dl/supportedsites.html\");\n            }\n            else {\n                Logger_1.default.error(bot, \"Unknown Error:\\n\\n```\" + error.message + \"```\", error);\n            }\n        });\n    }\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = Add;\n"],"sourceRoot":"/source/"}